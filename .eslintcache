[{"/home/tullio/Desktop/lavoro/React/msgredux/src/index.js":"1","/home/tullio/Desktop/lavoro/React/msgredux/src/App.js":"2","/home/tullio/Desktop/lavoro/React/msgredux/src/reportWebVitals.js":"3","/home/tullio/Desktop/lavoro/React/msgredux/src/store.js":"4","/home/tullio/Desktop/lavoro/React/msgredux/src/components/auth/Signup.js":"5","/home/tullio/Desktop/lavoro/React/msgredux/src/components/auth/Login.js":"6","/home/tullio/Desktop/lavoro/React/msgredux/src/reducers/index.js":"7","/home/tullio/Desktop/lavoro/React/msgredux/src/actions/authActions.js":"8","/home/tullio/Desktop/lavoro/React/msgredux/src/reducers/authReducers.js":"9","/home/tullio/Desktop/lavoro/React/msgredux/src/actions/types.js":"10","/home/tullio/Desktop/lavoro/React/msgredux/src/firebase.js":"11","/home/tullio/Desktop/lavoro/React/msgredux/src/components/Dashboard.js":"12","/home/tullio/Desktop/lavoro/React/msgredux/src/components/PrivateRoute.js":"13","/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Chats.js":"14","/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Friends.js":"15","/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Settings.js":"16"},{"size":448,"mtime":1609627324459,"results":"17","hashOfConfig":"18"},{"size":635,"mtime":1609427409276,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1609364937583,"results":"20","hashOfConfig":"18"},{"size":419,"mtime":1609425002264,"results":"21","hashOfConfig":"18"},{"size":3855,"mtime":1609672138511,"results":"22","hashOfConfig":"18"},{"size":2424,"mtime":1609671845834,"results":"23","hashOfConfig":"18"},{"size":143,"mtime":1609424097251,"results":"24","hashOfConfig":"18"},{"size":1111,"mtime":1609431334164,"results":"25","hashOfConfig":"18"},{"size":717,"mtime":1609424790599,"results":"26","hashOfConfig":"18"},{"size":133,"mtime":1609424595825,"results":"27","hashOfConfig":"18"},{"size":535,"mtime":1609674315399,"results":"28","hashOfConfig":"18"},{"size":567,"mtime":1609621764342,"results":"29","hashOfConfig":"18"},{"size":484,"mtime":1609419814355,"results":"30","hashOfConfig":"18"},{"size":5539,"mtime":1609669645514,"results":"31","hashOfConfig":"18"},{"size":6686,"mtime":1609672985297,"results":"32","hashOfConfig":"18"},{"size":3369,"mtime":1609671000263,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ei4e90",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},"/home/tullio/Desktop/lavoro/React/msgredux/src/index.js",[],["75","76"],"/home/tullio/Desktop/lavoro/React/msgredux/src/App.js",["77"],"import './App.css';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport { Redirect } from 'react-router-dom'\nimport SignUp from './components/auth/Signup'\nimport Login from './components/auth/Login'\nimport Dashboard from './components/Dashboard'\nimport PrivateRoute from './components/PrivateRoute'\n\nconst App = () => {\n\n  return (\n      <Router>\n        <Switch>\n          <PrivateRoute exact path =\"/\" component = {Dashboard}/>\n          <Route path = \"/signup\" component = {SignUp} />\n          <Route path = \"/login\" component = {Login} />\n        </Switch>\n      </Router>\n  );\n}\n\n\nexport default App;\n","/home/tullio/Desktop/lavoro/React/msgredux/src/reportWebVitals.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/store.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/components/auth/Signup.js",["78"],"import React, { useRef, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signup } from '../../actions/authActions'\nimport { useEffect } from 'react'\nimport{ useSelector } from 'react-redux' \nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nfunction SignUp(props) {\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const usernameRef = useRef()\n    const passwordConfirmRef = useRef()\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const history = useHistory()\n    const [usernames, setUsernames] = useState([])\n    const currentUser = useSelector(state=>state.auth.user)\n\n    useEffect(()=>{\n        retrieveUsernames()\n        if(currentUser){\n            history.push('/')\n        }\n\n    },[currentUser])\n    \n    function retrieveUsernames(){\n        var users = firebase.database().ref('users/');\n        users.on('value', (snapshot) => {\n            let results = []\n            for(var key in snapshot.val()){\n                if(snapshot.val().hasOwnProperty(key)){\n                    results.push(snapshot.val()[key].username)\n                }\n            }\n            setUsernames(usernames => results)\n        })\n    }\n\n    async function handleSubmit(e){\n        e.preventDefault()\n        if (passwordRef.current.value !== passwordConfirmRef.current.value){\n            return setError('Password do not match')\n        } else if (usernames.includes(usernameRef.current.value)) {\n            return setError('Username already taken')\n        }\n        try{\n            setError('')\n            setLoading(true)\n            props.signup({\n                email: emailRef.current.value,\n                password: passwordRef.current.value,\n                username: usernameRef.current.value\n            })\n     \n        } catch {\n            setError('Failed to create an account')\n        }\n        setLoading(false)\n    }\n\n        return (\n            <div className=\"App container d-flex align-items-center justify-content-center\">\n                <div className =\"w-100\" style = {{maxWidth: \"500px\"}}>\n                    <div className = \"authComp card mt-5\">\n                         <h2 className = \"text-center mb-4\">Sign Up</h2>\n                         {error && <div className = \"alert alert-danger\">{error}</div>}\n                         <form onSubmit = {handleSubmit}>\n                             <label htmlFor = \"email\" className=\"form-label\">Email</label>\n                             <input ref = {emailRef} className=\"form-control\" type=\"email\" id=\"email\" required/>\n   \n                             <label htmlFor = \"username\" className=\"form-label\">Userame</label>\n                             <input ref = {usernameRef} className=\"form-control\" type=\"text\" id=\"username\" required/>\n   \n                             <label htmlFor = \"password\" className=\"form-label\">Password</label>\n                             <input ref = {passwordRef} className=\"form-control\" type=\"password\" id=\"password\" required/>\n   \n                             <label htmlFor = \"passwordConfirm\" className=\"form-label\">Password Confirmation</label>\n                             <input ref = {passwordConfirmRef} className=\"form-control\" type=\"password\" id=\"passwordConfirm\" required/>\n   \n                             <button disabled = {loading} className=\"btn mt-3 w-100 authBtn\">SIGN UP</button>\n                         </form>\n                     </div>\n                     <div className = \"authScritte w-100 text-center mt-2\">\n                         Already have an account? <Link className='link' to = \"/login\">Login</Link>\n                     </div>\n                </div>\n            </div>\n           \n        )\n    }\n\n\nexport default connect(null, { signup })(SignUp)","/home/tullio/Desktop/lavoro/React/msgredux/src/components/auth/Login.js",["79"],"import React, { useRef, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { login } from '../../actions/authActions'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux' \n\n\nfunction Login(props) {\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const history = useHistory()\n    const currentUser = useSelector(state=>state.auth.user)\n\n    useEffect(()=>{\n        if(currentUser){\n            history.push('/')\n        }\n\n    },[currentUser])\n    \n    async function handleSubmit(e){\n        e.preventDefault()\n\n        try{\n            setError('')\n            setLoading(true)\n            await props.login({\n                email: emailRef.current.value,\n                password: passwordRef.current.value    \n            })\n            \n        } catch {\n            setError('Failed to sign in')\n        }\n        setLoading(false)\n    }\n\n        return (\n            <div className=\"App container d-flex align-items-center justify-content-center \">\n                <div className =\"w-100\" style = {{maxWidth: \"500px\"}}>\n                    <div className = \"card mt-5 authComp\">\n                         <h2 className = \"text-center mb-4\">Login</h2>\n                         {error && <div className = \"alert alert-danger\">{error}</div>}\n                         <form onSubmit = {handleSubmit}>\n                             <label htmlFor = \"email\" className=\"form-label\">Email</label>\n                             <input ref = {emailRef} className=\"form-control\" type=\"email\" id=\"email\" required/>\n   \n                             <label htmlFor = \"password\" className=\"form-label\">Password</label>\n                             <input ref = {passwordRef} className=\"form-control\" type=\"password\" id=\"password\" required/>\n   \n                             <button disabled = {loading} className=\"btn mt-3 w-100 authBtn\">LOGIN</button>\n                         </form>\n                     </div>\n                     <div className = \"authScritte w-100 text-center mt-2\">\n                         Need an Account? <Link className='link' to = \"/signup\">SignUp</Link>\n                     </div>\n                </div>\n            </div>\n           \n        )\n    }\n\n\nexport default connect(null, { login })(Login)","/home/tullio/Desktop/lavoro/React/msgredux/src/reducers/index.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/actions/authActions.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/reducers/authReducers.js",["80"],"import { LOGIN, SIGNUP, LOGOUT, CHECK_USER } from '../actions/types';\n\nconst initialState = {\n    user: {}\n}\n\nexport default function (state = initialState, action) {\n    switch(action.type){\n        case LOGIN:\n            return{\n                ...state,\n                user: action.payload\n            }\n        case LOGOUT:\n            return{\n                ...state,\n                user: action.payload\n            }\n        case SIGNUP:\n            return{\n                ...state,\n                user: action.payload\n            }\n        case CHECK_USER:\n            return{\n                ...state,\n                user: action.payload\n            }\n        default:\n            return state;\n    }\n}","/home/tullio/Desktop/lavoro/React/msgredux/src/actions/types.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/firebase.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/components/Dashboard.js",["81"],"import React from 'react'\nimport { useEffect } from 'react'\nimport { checkUser } from '../actions/authActions'\nimport { connect } from 'react-redux'\nimport Chats from './frontpage/Chats'\nimport Friends from './frontpage/Friends'\nimport Settings from './frontpage/Settings'\n\nfunction Dashboard(props) {\n    useEffect(()=>{\n        props.checkUser()\n    },[])\n    \n    return (\n        <div className='visual row p-2 pl-4'>\n            <Friends/>\n            <Chats/>\n            <Settings/>\n        </div>\n    )\n}\n\nexport default  connect(null, {checkUser})(Dashboard)","/home/tullio/Desktop/lavoro/React/msgredux/src/components/PrivateRoute.js",[],"/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Chats.js",["82","83"],"import React, { useEffect, useState, useRef} from 'react'\nimport { useSelector } from 'react-redux' \nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n\nexport default function Chats() {\n    const [chats, setChats] = useState([])\n    const [isChatting, setIsChatting] = useState(false)\n    const [currentChat, setCurrentChat] = useState({})\n    const [messages, setMessages] = useState([])\n    const [username, setUsername] = useState(''); //username current user\n    const textRef = useRef()\n    const currentUser = useSelector(state=>state.auth.user)\n\n    useEffect(()=>{\n        retrieveUsername()\n        retrieveCurrentUserChats()\n        if(isChatting){\n            retrieveMessages()\n        }\n    },[currentUser, isChatting])\n\n    function retrieveCurrentUserChats(){\n        var chatsRef = firebase.database().ref('chats')\n        chatsRef.on('value', (snapshot)=>{\n            let chatsTemp = []\n            for(var key in snapshot.val()){\n                if(snapshot.val()[key].user1 === currentUser.uid ){\n                    chatsTemp.push({\n                        chatKey: key,\n                        friendID: snapshot.val()[key].user2,\n                        friendUsername: snapshot.val()[key].user2username\n                    })\n                } else if(snapshot.val()[key].user2 === currentUser.uid){\n                    chatsTemp.push({\n                        chatKey: key,\n                        friendID: snapshot.val()[key].user1,\n                        friendUsername: snapshot.val()[key].user1username\n                    })\n                }\n            }\n            setChats(chats=>chatsTemp)\n        })\n    }\n\n    function retrieveUsername(){\n        var userData = firebase.database().ref('users/' + currentUser.uid)\n        userData.on('value', (snapshot) => {\n            if(snapshot.val()){\n                setUsername(snapshot.val().username)\n            }\n        })\n    }\n\n    function openChat(props){\n        setIsChatting(true)\n        setCurrentChat({\n            idFriendChatting: props.friendID,\n            chatID: props.chatKey,\n            usernameFriendChatting: props.friendUsername\n        })\n    }\n\n    function retrieveMessages(){\n        var messages = firebase.database().ref('chats/'+ currentChat.chatID+'/msgs')\n        messages.on('value', (snapshot)=>{\n            if(snapshot.val()){\n                let msgsTemp = []\n                for(var key in snapshot.val()){\n                    var messaggio = {\n                        content: snapshot.val()[key].msg,\n                        sender: snapshot.val()[key].sender,\n                        senderID: snapshot.val()[key].senderID\n                    }\n                    msgsTemp.push(messaggio)\n                }\n                setMessages(messages=>msgsTemp)\n            }\n        })\n    }\n\n    async function sendMessage(e){\n        e.preventDefault()\n        var messaggio = textRef.current.value\n        textRef.current.value = ''\n        var messages = firebase.database().ref('chats/'+ currentChat.chatID+'/msgs')\n        await messages.push({\n            msg: messaggio,\n            sender: username,\n            senderID: currentUser.uid\n        })\n        updateScroll()\n    }\n    function goBack(){\n        setIsChatting(false)\n    }\n    function deleteChat(props){\n        var chat = firebase.database().ref('chats/'+props.chatKey)\n        chat.remove()\n        window.location.reload();\n    }\n\n    function updateScroll(){\n        var element = document.getElementById(\"chat\");\n        element.scrollTop = element.scrollHeight;\n    }\n\n    return (\n        <div className='col-6 chats m-2'>\n            <h2  className='mx-auto mt-3'><i class=\"far fa-comments\"></i> CHATS</h2>\n            {chats && !isChatting && chats.map(chat=>{\n                return (\n                    <div className='chatContainer' >\n                        <div onClick={()=>openChat(chat)} className='card alreadyChatting w-100 mt-2'>\n                            <p className='mx-auto my-2'>{chat.friendUsername}</p>\n                        </div>\n                        <button onClick={()=>deleteChat(chat)} className='btn redBtn circularBtn mt-2'><i class=\"far fa-trash-alt\"></i></button>\n                    </div>\n                    \n                )\n            })}\n                {isChatting && <h5 className = 'm-3'> <i onClick={goBack} class=\"backBtn fas fa-arrow-circle-left fa-lg\"></i> {currentChat.usernameFriendChatting}</h5>}\n            <div className='msgsBox' id='chat'>\n                {isChatting && messages.map(msg => {\n                    if(msg.senderID === currentUser.uid){\n                        return(\n                            <div className='d-flex justify-content-end'>\n                                <p className='msg-sender'>{msg.content}</p>\n                            </div>\n                        )\n                    } else {\n                        return(\n                            <div className='d-flex justify-content-start'>\n                                <p className='msg-receiver'>{msg.content}</p>\n                            </div>\n                        )\n                    }\n                })\n                }\n            </div>\n                {isChatting && <form onSubmit={sendMessage} className= 'row  mb-3 d-flex justify-content-center chatinput w-100'>\n                    <input placeholder='message...' type='submit' ref={textRef} type='text' className='w-75 messageInput'/>\n                </form>}\n            \n        </div>\n    )\n}\n","/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Friends.js",["84","85","86","87","88","89"],"import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux' \nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nexport default function Friends() {\n    const [search, setSearch] = useState('');\n    const [searchResults, setSearchResults] = useState([])\n    const [username, setUsername] = useState(''); //current user id\n    const currentUser = useSelector(state=>state.auth.user)\n    const [friendList, setFriendList] = useState([])\n    const [chats, setChats] = useState([]) //amici che hanno già una chat con current\n\n    useEffect(()=>{\n        retrieveUsername()\n        retrieveFriends()\n        retrieveChats()\n        if(search){\n            handleSearch()\n        }\n    },[search, currentUser])\n\n    //retrieve current use id\n    function retrieveUsername(){\n        var userData = firebase.database().ref('users/' + currentUser.uid)\n        userData.on('value', (snapshot) => {\n            if(snapshot.val()){\n                setUsername(snapshot.val().username)\n            }\n        })\n    }\n\n    function handleSearch(){\n        var users = firebase.database().ref('users/');\n        users.on('value', (snapshot) => {\n            let results = []\n            for(var key in snapshot.val()){\n                if(snapshot.val().hasOwnProperty(key)){\n                    if(snapshot.val()[key].username.includes(search)){\n                        var match = {\n                            uid: key,\n                            username: snapshot.val()[key].username,\n                            requests: snapshot.val()[key].requests,\n                            friends: snapshot.val()[key].friends\n                        }\n                        results.push(match)\n                    }\n                }\n            }\n            setSearchResults(searchResults => results)\n        })\n    }\n\n    function retrieveFriends(){\n        var friends = firebase.database().ref('users/'+ currentUser.uid + '/friends')\n        let frnd = []\n        friends.on('value', (snapshot)=>{\n            for(var key in snapshot.val()){\n                var currentFriend = {\n                    id: snapshot.val()[key].friendID,\n                    username: snapshot.val()[key].friendUsername\n                }\n                frnd.push(currentFriend)\n            }\n            setFriendList(friendList => frnd)\n        })\n    }\n\n    function retrieveChats(){\n        var chats = firebase.database().ref('chats/')\n        chats.on('value', (snapshot)=>{\n            let chatsTemp = []\n            for(var key in snapshot.val()){\n                if(currentUser.uid === snapshot.val()[key].user1){\n                    chatsTemp.push(snapshot.val()[key].user2)\n                } else if(currentUser.uid === snapshot.val()[key].user2){\n                    chatsTemp.push(snapshot.val()[key].user1)\n                }\n            }\n            setChats(chats=>chatsTemp)\n        })\n    }\n\n    function handleChange(e){\n        setSearch(e.target.value)\n    }\n\n    function handleAdd(props){\n        var user = firebase.database().ref('users/'+ props.uid +'/requests/');\n        user.push({\n            userAsking: currentUser.uid, \n            username: username\n        })\n    }\n\n    function newChat(props){\n        var chats = firebase.database().ref('/chats/')\n        chats.push({\n            user1: currentUser.uid, \n            user2: props.id,\n            user1username: username,\n            user2username: props.username\n        })\n    }\n    \n    return (\n        <div className='col chats m-1'>\n            \n            <form className='mt-4 d-flex justify-content-center'>\n                <input  placeholder='Search friends...' type='text' className='w-75 searchFriends' value={search} onChange={handleChange} />\n            </form>\n            {/*visualizza lista amici quando non si sta effettuando una ricerca */}\n            {!search && <h2 className='mx-auto mt-3'> <i className=\"far fa-address-book fa-sm\"> </i> Friends List</h2>}\n            {!search && friendList && friendList.map(friend=>{\n                var isChatting = false\n                chats.map(chat=>{\n                    if(chat === friend.id){\n                        isChatting=true\n                    } \n                })\n                if(isChatting){\n                    return <p className='mx-auto my-3'>{friend.username} <i className=\"greenIcon fas fa-comments fa-lg\"></i></p>\n                }else{\n                    return <p className='mx-auto my-3'>{friend.username} <i onClick={()=>newChat(friend)} className='far fa-comments fa-lg clickable'></i></p>\n                }\n            })}\n            {/*Visualizza ricerca onChange dell'input */}\n            {search && searchResults.map(result => {\n                if(result.username !== username){\n                    for(var key in result.requests){\n                        if(result.requests[key].userAsking === currentUser.uid){\n                            //return in caso si sia inviata la richiesta all'utente\n                            return(\n                                <div className='m-2'>\n                                    <p >\n                                        {result.username} <i className=\"greenIcon fas fa-paper-plane fa-lg\"></i>\n                                    </p>\n                                </div>\n\n                            )\n                        }\n                    }\n                    for(var key in result.friends){\n                        var isFriend = false\n                        friendList.map(friend=>{\n                            if(friend.id === result.uid){\n                                isFriend = true\n                                \n                            }\n                        })\n                        if(isFriend){\n                            //return in caso l'utente sia già amico\n                            return(\n                            <div className='m-2'>\n                                <p>\n                                    {result.username} <i className=\"greenIcon far fa-handshake fa-lg\"></i>\n                                </p>\n                            </div>\n                        )}\n                    }\n                    //return normale con possibilità di aggiungere agli amici\n                    return (\n                        <div  className='m-2'>\n                            <p >\n                                {result.username} <i onClick={()=>handleAdd(result)} className=\"greenIcon clickable far fa-paper-plane fa-lg\"></i>\n                            </p>\n                        </div>\n                    )\n                }\n            })}\n        </div>\n    )\n}\n","/home/tullio/Desktop/lavoro/React/msgredux/src/components/frontpage/Settings.js",["90"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { logout } from '../../actions/authActions'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux' \nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n function Settings(props) {\n    const history = useHistory()\n    const [username, setUsername] = useState(''); //username current user\n    const [friendRequests, setFriendRequests] = useState([])\n    const currentUser = useSelector(state=>state.auth.user)\n\n    useEffect(()=>{\n        if(currentUser){\n            retrieveUsername()\n            retrievRequests()\n        }\n    },[currentUser])\n\n    function retrieveUsername(){\n        var userData = firebase.database().ref('users/' + currentUser.uid)\n        userData.on('value', (snapshot) => {\n            if(snapshot.val()){\n                setUsername(snapshot.val().username)\n            }\n        })\n    }\n\n    async function handleLogout(e){\n        e.preventDefault()\n        await props.logout()\n        history.push('/login')\n    }\n\n    function retrievRequests(){\n        var requests = firebase.database().ref('users/' + currentUser.uid + '/requests');\n        requests.on('value', (snapshot)=>{\n            let req = []\n            for(var key in snapshot.val()){\n                var objReq = {\n                    rid: key, //request id\n                    username: snapshot.val()[key].username,\n                    urid: snapshot.val()[key].userAsking  //user requesting id\n                }\n                req.push(objReq)\n            }\n            setFriendRequests(friendRequests => req)\n        })\n    }\n\n    function handleAddFriend(props){\n        var friendsList = firebase.database().ref('users/'+ currentUser.uid+'/friends');\n        friendsList.push({friendID: props.urid, friendUsername: props.username}) //aggiunge l'amico che ha fatto la richiesta agli amici del current\n        var requesterFriendsList = firebase.database().ref('users/'+ props.urid+'/friends');\n        requesterFriendsList.push({friendID: currentUser.uid, friendUsername: username})\n        var req = firebase.database().ref('users/'+currentUser.uid+'/requests/'+props.rid)\n        req.remove()\n        window.location.reload();\n    }\n\n\n    function handleDeclineFriend(props){\n        var req = firebase.database().ref('users/'+currentUser.uid+'/requests/'+props.rid)\n        req.remove()\n        window.location.reload();\n    }\n\n    return (\n        <div className='col chats m-1 '>\n            <h3 className='mt-2'><i className=\"far fa-user fa-sm\"></i> {username}</h3>\n            <h5>Friend requests: {friendRequests.length}</h5>\n            \n            {friendRequests.map(friendRequest => {\n                return (\n                    <div>\n                        {friendRequest.username}\n                        <i onClick={()=>handleAddFriend(friendRequest)} className='mx-2 my-3 fas fa-check fa-lg clickable greenIcon'></i>\n                        <i onClick={()=>handleDeclineFriend(friendRequest)} className='mx-2 my-3 fas fa-times fa-lg clickable redIcon'></i>\n                    </div>\n                )\n            })}\n\n            <button className='btn redBtn w-100 mt-3' onClick={handleLogout}>Logout</button>\n        </div>\n    )\n}\n\nexport default connect(null, {logout})(Settings)",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":27,"column":7,"nodeType":"101","endLine":27,"endColumn":20,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"100","line":22,"column":7,"nodeType":"101","endLine":22,"endColumn":20,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":1,"nodeType":"106","endLine":32,"endColumn":2},{"ruleId":"99","severity":1,"message":"107","line":12,"column":7,"nodeType":"101","endLine":12,"endColumn":9,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"109","line":22,"column":7,"nodeType":"101","endLine":22,"endColumn":32,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":143,"column":81,"nodeType":"113","endLine":143,"endColumn":92},{"ruleId":"99","severity":1,"message":"114","line":21,"column":7,"nodeType":"101","endLine":21,"endColumn":28,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":116,"column":31,"nodeType":"118","messageId":"119","endLine":116,"endColumn":33},{"ruleId":"116","severity":1,"message":"120","line":128,"column":49,"nodeType":"118","messageId":"121","endLine":128,"endColumn":51},{"ruleId":"122","severity":1,"message":"123","line":143,"column":29,"nodeType":"97","messageId":"124","endLine":143,"endColumn":32},{"ruleId":"125","severity":1,"message":"126","line":145,"column":40,"nodeType":"118","messageId":"127","endLine":150,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":145,"column":46,"nodeType":"118","messageId":"119","endLine":145,"endColumn":48},{"ruleId":"99","severity":1,"message":"128","line":21,"column":7,"nodeType":"101","endLine":21,"endColumn":20,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["132"],["133"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["134"],"React Hook useEffect has missing dependencies: 'retrieveCurrentUserChats', 'retrieveMessages', and 'retrieveUsername'. Either include them or remove the dependency array.",["135"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'handleSearch', 'retrieveChats', 'retrieveFriends', and 'retrieveUsername'. Either include them or remove the dependency array.",["136"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-redeclare","'key' is already defined.","redeclared","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'isFriend'.","unsafeRefs","React Hook useEffect has missing dependencies: 'retrievRequests' and 'retrieveUsername'. Either include them or remove the dependency array.",["137"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"138","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [currentUser, history]",{"range":"149","text":"150"},{"range":"151","text":"150"},"Update the dependencies array to be: [props]",{"range":"152","text":"153"},"Update the dependencies array to be: [currentUser, isChatting, retrieveCurrentUserChats, retrieveMessages, retrieveUsername]",{"range":"154","text":"155"},"Update the dependencies array to be: [search, currentUser, retrieveUsername, retrieveFriends, retrieveChats, handleSearch]",{"range":"156","text":"157"},"Update the dependencies array to be: [currentUser, retrievRequests, retrieveUsername]",{"range":"158","text":"159"},[850,863],"[currentUser, history]",[633,646],[354,356],"[props]",[722,747],"[currentUser, isChatting, retrieveCurrentUserChats, retrieveMessages, retrieveUsername]",[729,750],"[search, currentUser, retrieveUsername, retrieveFriends, retrieveChats, handleSearch]",[693,706],"[currentUser, retrievRequests, retrieveUsername]"]